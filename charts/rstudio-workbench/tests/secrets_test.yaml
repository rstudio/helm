suite: Workbench Secrets
templates:
  - configmap-general.yaml
  - configmap-prestart.yaml
  - configmap-secret.yaml
  - configmap-session.yaml
  - deployment.yaml
kubernetesProvider:
  scheme:
    "v1/Secret":
      gvr:
        version: v1
        resource: secrets
      namespaced: true
  objects:
    - kind: Secret
      apiVersion: v1
      metadata:
        name: launcherpem-secret
        namespace: NAMESPACE
      data:
        launcher.pem: bXktc2VjcmV0LWNvbnRlbnQ= # base64 encoded value
    - kind: Secret
      apiVersion: v1
      metadata:
        name: userpassword-secret
        namespace: NAMESPACE
      data:
        password: bXlzZWNyZXRwYXNzd29yZA== # base64 encoded "mysecretpassword"
    - kind: Secret
      apiVersion: v1
      metadata:
        name: securecookiekey-secret
        namespace: NAMESPACE
      data:
        secure-cookie-key: c2VjdXJlY29va2lla2V5dmFsdWU= # base64 encoded "securecookiekeyvalue"
    - kind: Secret
      apiVersion: v1
      metadata:
        name: globalsecurecookiekey-secret
        namespace: NAMESPACE
      data:
        secure-cookie-key: Z2xvYmFsc2VjdXJlY29va2lla2V5dmFsdWU= # base64 encoded "globalsecurecookiekeyvalue"
    - kind: Secret
      apiVersion: v1
      metadata:
        name: databaseconf-secret
        namespace: NAMESPACE
      data:
        database.conf: cHJvdmlkZXI9cG9zdGdyZXNxbApkYXRhYmFzZT1yc3AKcG9ydD01NDMyCmhvc3Q9ZGIuZXhhbXBsZS5jb20KdXNlcm5hbWU9cnN0dWRpb19hcHAKcGFzc3dvcmQ9c2VjdXJlcGFzc3dvcmQK # base64 encoded database config
tests:
  - it: should set userPassword from existing secret
    template: deployment.yaml
    set:
      userCreate: true
      userPassword:
        existingSecret: "userpassword-secret"
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].env[?(@.name=="RSW_TESTUSER_PASSWD")].valueFrom.secretKeyRef.name'
          value: userpassword-secret
      - equal:
          path: 'spec.template.spec.containers[0].env[?(@.name=="RSW_TESTUSER_PASSWD")].valueFrom.secretKeyRef.key'
          value: password
  - it: should set userPassword from literal value
    template: deployment.yaml
    set:
      userCreate: true
      userPassword:
        value: "myplaintextpassword"
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].env[?(@.name=="RSW_TESTUSER_PASSWD")].value'
          value: "myplaintextpassword"
  - it: should not set the env var RSW_TESTUSER_PASSWD if neither userPasswrd.existingSecret nor userPassword.value is set
    template: deployment.yaml
    set:
      userCreate: true
    asserts:
      - equal:
        path: 'spec.template.spec.containers[0].env[?(@.name=="RSW_TESTUSER_PASSWD")]'
        value: null
        not: true
  - it: should specify a volumeMount and a projected volume for rstudio-secret if config.secret is set
    template: deployment.yaml
    set:
      config:
        defaultMode:
          secret: 0600
        secret:
          database.conf:
            provider: 'postgresql'
            database: 'rsp'
            port: 5432
            host: 'db.example.com'
            username: 'rstudio_app'
            password: 'securepassword'
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].mountPath'
          value: "/mnt/secret-configmap/rstudio/"
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.name'
          value: 'database.conf'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].key'
          value: 'database.conf'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].mode'
          value: 0600
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].path'
          value: 'database.conf'
      - matchRegex:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].value'
          pattern: '.*provider:postgresql.*'
      - matchRegex:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].value'
          pattern: '.*password:securepassword.*'
  - it: should specify a volumeMount and a projected volume for rstudio-secret if launcherPem.existingSecret is set
    template: deployment.yaml
    set:
      config:
        defaultMode:
          secret: 0600
      launcherPem:
        existingSecret: "launcherpem-secret"
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].mountPath'
          value: "/mnt/secret-configmap/rstudio/"
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.name'
          value: 'launcherpem-secret'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].key'
          value: 'launcher.pem'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].mode'
          value: 0600
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].path'
          value: 'launcher.pem'
  - it: should specify a volumeMount and a projected volume for rstudio-secret based on secureCookieKey.existingSecret if secureCookieKey.existingSecret is set and global.secureCookieKey.existingSecret is not set
    template: deployment.yaml
    set:
      config:
        defaultMode:
          secret: 0600
      secureCookieKey:
        existingSecret: "securecookiekey-secret"
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].mountPath'
          value: "/mnt/secret-configmap/rstudio/"
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.name'
          value: 'securecookiekey-secret'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].key'
          value: 'secure-cookie-key'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].mode'
          value: 0600
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].path'
          value: 'secure-cookie-key'
  - it: should specify a volumeMount and a projected volume for rstudio-secret based on global.secureCookieKey.existingSecret if secureCookieKey.existingSecret is set and global.secureCookieKey.existingSecret is set
    template: deployment.yaml
    set:
      config:
        defaultMode:
          secret: 0600
      global:
        secureCookieKey:
            existingSecret: "globalsecurecookiekey-secret"
      secureCookieKey:
        existingSecret: "securecookiekey-secret"
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].mountPath'
          value: "/mnt/secret-configmap/rstudio/"
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.name'
          value: 'globalsecurecookiekey-secret'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].key'
          value: 'secure-cookie-key'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].mode'
          value: 0600
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].path'
          value: 'secure-cookie-key'
  - it: should specify a volumeMount and a projected volume for rstudio-secret based on global.secureCookieKey.existingSecret if secureCookieKey.existingSecret is not set and global.secureCookieKey.existingSecret is set
    template: deployment.yaml
    set:
      config:
        defaultMode:
          secret: 0600
      global:
        secureCookieKey:
          existingSecret: "globalsecurecookiekey-secret"
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].mountPath'
          value: "/mnt/secret-configmap/rstudio/"
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.name'
          value: 'globalsecurecookiekey-secret'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].key'
          value: 'secure-cookie-key'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].mode'
          value: 0600
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].path'
          value: 'secure-cookie-key'
  - it: should specify a volumeMount and a projected volume for rstudio-secret if config.database.conf.existingSecret is set
    template: deployment.yaml
    set:
      config:
        defaultMode:
          secret: 0600
        database:
          conf:
            existingSecret: "databaseconf-secret"
    asserts:
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].mountPath'
          value: "/mnt/secret-configmap/rstudio/"
      - equal:
          path: 'spec.template.spec.containers[0].volumeMounts[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].name'
          value: "rstudio-secret"
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.name'
          value: 'databaseconf-secret'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].key'
          value: 'database.conf'
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].mode'
          value: 0600
      - equal:
          path: 'spec.template.spec.volumes[?(@.name=="rstudio-secret")].projected.sources[0].secret.items[0].path'
          value: 'database.conf'
